"""
≛ <b>Commands Available</b> ≛

──────────────────────
- <code>/gkey</code>: Generate a key for paid users.
➛ Params: <b>Days</b> || <b>Test key</b>
➻ Example: `/gkey 28` OR `/gkey test`
──────────────────────
- <code>/del_key</code>: Delete key if exists.
➛ Params: <b>key</b>
➻ Example: <code>/del_key *key*</code>
"""


import os,sys
import random
from time import gmtime, strftime
import time

from mills import LOG_CHAT
from mills.decorators import bot_cmd
from ..checkers.utils.userinfo  import user_info




@bot_cmd(cmd="gkey", admins_only = True)
async def _(m):
    params = m.pattern_match.group(1).strip()
    if len(params) == 0 or params != 'test' and not params.isdigit():
        await m.sod("Wrong Input Check Example: <code>/gkey days[int] | test</code>", time = 5)
        return
    data = int(params) if params.isdigit() else 1
    type = 'hour' if params == 'test' else 'day'
    rand_digit = random.random_integer()
    rand_string = random.random_string(5)
    key = f"MILLIE-{rand_digit}-{rand_string}-PREMIUM"
    add = {
        '_id': key,
        'data': data,
        'time_type': type,
        'gen_by': m.sender_id,
        'gen_name': m.full_name(),
        'gen_date': strftime("%Y-%m-%d", gmtime()),
        'type': 'P',
    }
    insert = await m.mdb.insert_one('keys',  add)
    if insert:
        m.log.info(f"{m.sender_id} Generated Key: {key}")
        text = f"""
<b>Key Generated</b>:
<b>Key</b>: <code>{key}</code>
<b>Type</b>: {type}
<b>Data</b>: {data} days
<b>Generated By</b>: {m.full_name()}
<b>Generated On</b>: {strftime("%Y-%m-%d", gmtime())}
<i>use <code>/claim {key}</code> to claim the key</i>
"""
        await m.sod(text)
        await m.client.send_message(LOG_CHAT,  f"{m.sender_id} Generated Key: {key}")
    else:
        await m.sod("Error While Generating Key", time = 5)



@bot_cmd(cmd="dkey", admins_only = True)
async def _(m):
    params = m.pattern_match.group(1).strip()
    if not params or not ( params.startswith('MILLIE-') and params.endswith('PREMIUM') ):
        await m.sod("Wrong Input Check Example: <code>/dkey key</code>", time = 5)
        return
    is_key = await m.mdb.find_one('keys', {'_id': params})
    if not is_key:
        await m.sod("Provided key not found Example: <code>/gkey key</code>", time = 5)
        return
    m.log.info(f"{m.sender_id} Deleted Key: {params}")
    await m.sod(f"`{params}` key deleted from server.")

